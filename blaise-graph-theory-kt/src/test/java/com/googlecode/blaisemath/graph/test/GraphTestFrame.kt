package com.googlecode.blaisemath.graph.test
/*
 * #%L
 * BlaiseGraphTheory
 * --
 * Copyright (C) 2009 - 2021 Elisha Peterson
 * --
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
import com.google.common.base.Functions
import com.googlecode.blaisemath.editor.EditorRegistration
import com.googlecode.blaisemath.firestarter.PropertySheet
import com.googlecode.blaisemath.graph.generate.EdgeLikelihoodGenerator
import com.googlecode.blaisemath.graph.generate.EdgeLikelihoodGenerator.EdgeLikelihoodParameters
import com.googlecode.blaisemath.graph.layout.CircleLayout
import com.googlecode.blaisemath.graph.layout.CircleLayout.CircleLayoutParameters
import com.googlecode.blaisemath.graph.layout.RandomBoxLayout
import com.googlecode.blaisemath.graph.layout.RandomBoxLayout.BoxLayoutParameters
import com.googlecode.blaisemath.graph.layout.SpringLayout
import com.googlecode.blaisemath.graph.layout.SpringLayoutParameters
import com.googlecode.blaisemath.graph.view.GraphComponent
import com.googlecode.blaisemath.graph.view.VisualGraph
import com.googlecode.blaisemath.graphics.svg.SvgElementGraphicConverter
import com.googlecode.blaisemath.graphics.svg.SvgGraphic
import com.googlecode.blaisemath.graphics.svg.SvgGraphicComponent
import com.googlecode.blaisemath.graphics.svg.SvgUtils
import com.googlecode.blaisemath.graphics.swing.CanvasPainter
import com.googlecode.blaisemath.graphics.swing.PanAndZoomHandler
import com.googlecode.blaisemath.style.Styles
import com.googlecode.blaisemath.style.xml.AttributeSetAdapter
import com.googlecode.blaisemath.svg.HelloWorldSvg
import com.googlecode.blaisemath.svg.SvgCircle
import com.googlecode.blaisemath.svg.SvgCircle.CircleConverter
import com.googlecode.blaisemath.svg.SvgElement
import com.googlecode.blaisemath.svg.SvgElements
import com.googlecode.blaisemath.svg.SvgEllipse
import com.googlecode.blaisemath.svg.SvgEllipse.EllipseConverter
import com.googlecode.blaisemath.svg.SvgGroup
import com.googlecode.blaisemath.svg.SvgImage
import com.googlecode.blaisemath.svg.SvgImage.ImageConverter
import com.googlecode.blaisemath.svg.SvgIo
import com.googlecode.blaisemath.svg.SvgLine
import com.googlecode.blaisemath.svg.SvgLine.LineConverter
import com.googlecode.blaisemath.svg.SvgNamespaceFilter
import com.googlecode.blaisemath.svg.SvgPath
import com.googlecode.blaisemath.svg.SvgPath.SvgPathOperator
import com.googlecode.blaisemath.svg.SvgPathTest
import com.googlecode.blaisemath.svg.SvgPolygon
import com.googlecode.blaisemath.svg.SvgPolygon.PolygonConverter
import com.googlecode.blaisemath.svg.SvgPolyline
import com.googlecode.blaisemath.svg.SvgPolyline.PolylineConverter
import com.googlecode.blaisemath.svg.SvgRectangle
import com.googlecode.blaisemath.svg.SvgRectangle.RectangleConverter
import com.googlecode.blaisemath.svg.SvgRoot
import com.googlecode.blaisemath.svg.SvgRootTest
import com.googlecode.blaisemath.svg.SvgText
import com.googlecode.blaisemath.svg.SvgText.TextConverter
import com.googlecode.blaisemath.svg.SvgTool
import com.googlecode.blaisemath.util.Images
import com.googlecode.blaisemath.util.Instrument.print
import com.googlecode.blaisemath.util.RollupPanel
import com.googlecode.blaisemath.util.geom.Points
import com.googlecode.blaisemath.util.swing.ContextMenuInitializer
import java.awt.*
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.awt.event.WindowAdapter
import java.awt.event.WindowEvent
import java.awt.geom.Point2D
import java.awt.geom.Rectangle2D
import java.beans.PropertyChangeEvent
import javax.swing.*

class GraphTestFrame private constructor() : JFrame() {
    var pga: VisualGraph<*>? = null

    /** Flag for when el needs points updated  */
    private var updateEL = true
    private var energyLayout: SpringLayout?
    private val layoutParams: SpringLayoutParameters?

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        jToolBar1 = JToolBar()
        randomLB = JButton()
        circleLB = JButton()
        jSeparator1 = JToolBar.Separator()
        jLabel1 = JLabel()
        energyIB = JButton()
        energyAB = JButton()
        energySB = JButton()
        jScrollPane1 = JScrollPane()
        rollupPanel1 = RollupPanel()
        plot = GraphComponent()
        selectionL = JLabel()
        defaultCloseOperation = EXIT_ON_CLOSE
        background = Color(0, 0, 0)
        jToolBar1.setRollover(true)
        randomLB.setText("Random Layout")
        randomLB.setFocusable(false)
        randomLB.setHorizontalTextPosition(SwingConstants.CENTER)
        randomLB.setVerticalTextPosition(SwingConstants.BOTTOM)
        randomLB.addActionListener(ActionListener { evt -> randomLBActionPerformed(evt) })
        jToolBar1.add(randomLB)
        circleLB.setText("Circle Layout")
        circleLB.setFocusable(false)
        circleLB.setHorizontalTextPosition(SwingConstants.CENTER)
        circleLB.setVerticalTextPosition(SwingConstants.BOTTOM)
        circleLB.addActionListener(ActionListener { evt -> circleLBActionPerformed(evt) })
        jToolBar1.add(circleLB)
        jToolBar1.add(jSeparator1)
        jLabel1.setText("ENERGY:")
        jToolBar1.add(jLabel1)
        energyIB.setText("iterate")
        energyIB.setFocusable(false)
        energyIB.setHorizontalTextPosition(SwingConstants.CENTER)
        energyIB.setVerticalTextPosition(SwingConstants.BOTTOM)
        energyIB.addActionListener(ActionListener { evt -> energyIBActionPerformed(evt) })
        jToolBar1.add(energyIB)
        energyAB.setText("animate")
        energyAB.setFocusable(false)
        energyAB.setHorizontalTextPosition(SwingConstants.CENTER)
        energyAB.setVerticalTextPosition(SwingConstants.BOTTOM)
        energyAB.addActionListener(ActionListener { evt -> energyABActionPerformed(evt) })
        jToolBar1.add(energyAB)
        energySB.setText("stop")
        energySB.setFocusable(false)
        energySB.setHorizontalTextPosition(SwingConstants.CENTER)
        energySB.setVerticalTextPosition(SwingConstants.BOTTOM)
        energySB.addActionListener(ActionListener { evt -> energySBActionPerformed(evt) })
        jToolBar1.add(energySB)
        contentPane.add(jToolBar1, BorderLayout.PAGE_START)
        jScrollPane1.setViewportView(rollupPanel1)
        contentPane.add(jScrollPane1, BorderLayout.EAST)
        contentPane.add(plot, BorderLayout.CENTER)
        contentPane.add(selectionL, BorderLayout.SOUTH)
        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun randomLBActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_randomLBActionPerformed
        updateEL = true
        val d: Double = SpringLayoutParameters.Companion.DEFAULT_DIST_SCALE * 2.toDouble()
        plot.getLayoutManager().applyLayout(RandomBoxLayout.Companion.getInstance(), null, BoxLayoutParameters(Rectangle2D.Double(-d, -d, 2 * d, 2 * d)))
    } //GEN-LAST:event_randomLBActionPerformed

    private fun circleLBActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_circleLBActionPerformed
        updateEL = true
        plot.getLayoutManager().applyLayout(CircleLayout.Companion.getInstance(), null, CircleLayoutParameters(SpringLayoutParameters.Companion.DEFAULT_DIST_SCALE * 2))
    } //GEN-LAST:event_circleLBActionPerformed

    private fun energyIBActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_energyIBActionPerformed
        if (energyLayout == null) {
            energyLayout = SpringLayout()
        }
        plot.getLayoutManager().layoutAlgorithm = energyLayout
        plot.getLayoutManager().layoutParameters = layoutParams
        plot.getLayoutManager().iterateLayout()
        updateEL = false
    } //GEN-LAST:event_energyIBActionPerformed

    private fun energyABActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_energyABActionPerformed
        if (energyLayout == null) {
            energyLayout = SpringLayout()
        }
        plot.getLayoutManager().layoutAlgorithm = energyLayout
        plot.getLayoutManager().layoutParameters = layoutParams
        plot.getLayoutManager().isLayoutTaskActive = true
    } //GEN-LAST:event_energyABActionPerformed

    private fun energySBActionPerformed(evt: ActionEvent?) { //GEN-FIRST:event_energySBActionPerformed
        plot.getLayoutManager().isLayoutTaskActive = false
    } //GEN-LAST:event_energySBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var circleLB: JButton? = null
    private var energyAB: JButton? = null
    private var energyIB: JButton? = null
    private var energySB: JButton? = null
    private var jLabel1: JLabel? = null
    private var jScrollPane1: JScrollPane? = null
    private var jSeparator1: JToolBar.Separator? = null
    private var jToolBar1: JToolBar? = null
    private var plot: GraphComponent? = null
    private var randomLB: JButton? = null
    private var rollupPanel1: RollupPanel? = null
    private var selectionL: JLabel? = null // End of variables declaration//GEN-END:variables

    companion object {
        /**
         * @param args the command line arguments
         */
        @JvmStatic
        fun main(args: Array<String>) {
            EventQueue.invokeLater { GraphTestFrame().isVisible = true }
        }
    }

    /** Creates new form TestPlaneVisometry  */
    init {
        EditorRegistration.registerEditors()
        initComponents()

        // BASIC ELEMENTS
        val graph = EdgeLikelihoodGenerator().apply(EdgeLikelihoodParameters(false, 50, .05f))
        plot.setGraph(graph)
        plot.getAdapter().viewGraph.isPointSelectionEnabled = true
        plot.getAdapter().viewGraph.isDragEnabled = true
        plot.getLayoutManager().applyLayout(CircleLayout.Companion.getInstance(), null, CircleLayoutParameters(100.0))
        PanAndZoomHandler.Companion.zoomBoxAnimated(plot, Points.boundingBox(plot.getLayoutManager().nodeLocationCopy.values, 5))
        plot.getAdapter().nodeStyler.setStyleDelegate { o: Any? ->
            Styles.DEFAULT_POINT_STYLE.copy()
                    .and(Styles.FILL, Color.lightGray)
                    .and(Styles.STROKE, Color.gray)
                    .and(Styles.STROKE_WIDTH, .5f)
                    .and(Styles.MARKER_RADIUS, 2 + Math.sqrt(o as Int?. toDouble ()))
        }
        plot.getAdapter().nodeStyler.setLabelDelegate(Functions.toStringFunction())
        plot.addContextMenuInitializer("Graph", ContextMenuInitializer<*> { menu: JPopupMenu?, src: Any?, point: Point2D?, focus: Any?, selection: MutableSet<*>? ->
            if (menu.getComponentCount() > 0) {
                menu.addSeparator()
            }
            if (focus != null) {
                menu.add("Graph Focus: $focus")
            }
            menu.add("Selection: " + (selection?.size ?: 0) + " selected items")
        })
        plot.addContextMenuInitializer("Node", ContextMenuInitializer<*> { menu: JPopupMenu?, src: Any?, point: Point2D?, focus: Any?, selection: MutableSet<*>? ->
            if (menu.getComponentCount() > 0) {
                menu.addSeparator()
            }
            if (focus != null) {
                menu.add("Node: $focus")
            }
        })
        plot.addContextMenuInitializer("Edge", ContextMenuInitializer<*> { menu: JPopupMenu?, src: Any?, point: Point2D?, focus: Any?, selection: MutableSet<*>? ->
            if (menu.getComponentCount() > 0) {
                menu.addSeparator()
            }
            if (focus != null) {
                menu.add("Edge: $focus")
            }
        })


        // PANELS
        energyLayout = SpringLayout()
        layoutParams = energyLayout.createParameters()
        rollupPanel1.add("Energy Layout", PropertySheet.forBean(layoutParams))
        for (p in plot.getGraphicRoot().graphics) {
            rollupPanel1.add(p.toString(), PropertySheet.forBean(p))
        }
        addWindowListener(object : WindowAdapter() {
            override fun windowClosing(e: WindowEvent?) {
                print(System.out, 50)
            }
        })

        // OVERLAY
        plot.getOverlays().add(CanvasPainter { component: Component?, canvas: Graphics2D? ->
            canvas.setColor(Color.black)
            canvas.drawLine(50, 50, 150, 50)
            canvas.drawLine(50, 40, 50, 60)
            canvas.drawLine(150, 40, 150, 60)
        } as CanvasPainter<Graphics2D?>)
        plot.getSelectionModel().addPropertyChangeListener { evt: PropertyChangeEvent? -> selectionL.setText(String.format("<html><b>Selection:</b> %s", evt.getNewValue())) }
    }
}